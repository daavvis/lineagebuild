#!/bin/bash

# Defaults
DEVICE=shamu
SAUCE="$PWD"
ADVNC=n
MOVE=n
STORAGE=
SYNC=n
J=4
BP=y
CCACHE=y
DEFAULT_CCACHE_DIR=~/.ccache
#PRCHR=n
QCLEAN=n
CLEAN=n
# OTA=n
FTP=n
FTPHOST=
FTPUSER=
FTPPASS=
FTPFULL=FULL/UNOFFICIAL
# FTPOTA=OTA/UNOFFICIAL
JB=n
ADBPUSH=y


readonly red=$(tput setaf 1) #  red
readonly grn=$(tput setaf 2) #  green
readonly ylw=$(tput setaf 3) #  yellow
readonly blu=$(tput setaf 4) #  blue
readonly cya=$(tput setaf 6) #  cyan
readonly txtbld=$(tput bold) # Bold
readonly bldred=$txtbld$red  #  red
readonly bldgrn=$txtbld$grn  #  green
readonly bldylw=$txtbld$ylw  #  yellow
readonly bldblu=$txtbld$blu  #  blue
readonly bldcya=$txtbld$cya  #  cyan
readonly txtrst=$(tput sgr0) # Reset

function err {
  echo "$txtrst${red}$*$txtrst" >&2
}

function ask {
  local opt=
  [[ $1 = -s ]] && opt="-s" && shift
  local question=$1
  local default=$2
  local response
  read $opt -rep "$txtrst$grn$question $txtrst" -i "$default" response
  [[ $opt = -s ]] && echo >&2
  if [[ -n $response ]]; then
    echo "$response"
    return 0
  else
    return 1
  fi
}

function askyn {
  local question=$1
  local default=$2
  local prompt response
  case "$default" in
    y|Y) prompt="$txtrst$grn$question [Y/n]? $txtrst"; default="y";;
    n|N) prompt="$txtrst$grn$question [y/N]? $txtrst"; default="n";;
     '') prompt="$txtrst$grn$question [y/n]? $txtrst";;
      *) echo "Error in script"; exit 1;;
  esac

  while :; do
    read -n 1 -rp "$prompt" response
    [[ -n $response ]] && echo >&2
    if [[ $response =~ ^[Yy]([Ee][Ss])?$ ]]; then
      [ -t 1 ] || echo y
      return 0
    elif [[ $response =~ ^[Nn]([Oo])?$ ]]; then
      [ -t 1 ] || echo n
      return 1
    elif [[ -z $reponse && -n $default ]]; then
      [ -t 1 ] || echo $default
      [[ $default = y ]]
      return $?
    fi
    err "Please press y or n"
  done
}

function demand {
  local question=$1
  local default=$2
  local response
  read -rep "$txtrst$grn$question $txtrst" -i "$default" response
  while [[ -z $response ]]; do
    err "Please enter a value"
    read -rep "$txtrst$grn$1 $txtrst" -i "$default" response
  done
  echo "$response"
}

function isIn {
  for val in "${@:2}"; do
    [[ $val = $1 ]] && return 0
  done
  return 1
}


rm -rf "/home/daavvis/daavvisgit/buildscript/build.conf"

#if [ "$USECONF" = n ]; then
  echo '#!/bin/bash' >> "/home/daavvis/daavvisgit/buildscript/build.conf"
# Add devices
  declare -i i=${#DEVICES[*]}
  if ((i == 0)); then
    DEVICES[$((i++))]=$(demand "Which device would you like to build?")
  fi
  echo "DEVICES[1]="${DEVICES[*]}"   # Build "${DEVICES[*]}"">>"/home/daavvis/daavvisgit/buildscript/build.conf"
  echo "Device list: ${DEVICES[*]}"

  while response=$(ask "Which other device would you like to build [return if done]?"); do
    if isIn "$response" "${DEVICES[@]}"; then
      err "You already said $response"
    else
      DEVICES[$((i++))]="$response"
      echo ""DEVICES[$((i++))]"="$response"   # Build "$response"">>"/home/daavvis/daavvisgit/buildscript/build.conf"
    fi
    echo "Device list: ${DEVICES[*]}"
  done
  echo "Final device list: ${DEVICES[*]}"
  echo ""
  echo "Building "${DEVICES[*]}" in order.">>"/home/daavvis/daavvisgit/buildscript/build.conf"

# Push to device
if ADBPUSH=$(askyn "Would you like to copy to device using ADB when complete?" "$ADBPUSH"); then
declare -i i=${#ADBPUSHDEV[*]}
  for DEVICE in ${DEVICES[@]}; do
    if ADBPUSHDEV=$(askyn "Would you like to copy to "$DEVICE"?" "$ADBPUSHDEV"); then
       ADBPUSHDEV[$((i++))]=$DEVICE
       echo ""ADBPUSHDEV[$((i++))]"="$DEVICE"   # copy "$DEVICE"">>"/home/daavvis/daavvisgit/buildscript/build.conf"
       echo "Will copy "${ADBPUSHDEV[@]}""
       ADBPF=$(ask "What device folder would you like to copy to?" "$ADBPF")

# Check to see if folder exists
       if [ `adb shell "if [ -e "$ADBPF" ]; then echo 1; fi"` ]; then
          echo "Folder exists";
       else
         err "Folder does not exist"
         echo "Creating "$ADFPF"."
         adb shell "mkdir "$ADBPF""
           if [ `adb shell "if [ -e "$ADBPF" ]; then echo 1; fi"` ]; then
             echo "Folder created succesfully."
           else
               err "Cannot create folder here!"
               until [ `adb shell "if [ -e "$ADBPF" ]; then echo 1; fi"` ]; do
                 eval ADBPF=$(ask "Enter the path to your storage directory [blank cancels]:" $ADPF)
                 adb shell "mkdir -p "$ADBPF""
                 [ `adb shell "if [ -e "$ADBPF" ]; then echo 1; fi"` ]
               done
             echo "Folder created succesfully."
           fi
         fi
    else
      echo "Ok, not pushing "$DEVICE"."
    fi

# Check device id
    ADBPF[$((i++))]=$DEVICE
    echo ""$DEVICE""FLDR"="$ADBPF"   # "$DEVICE" ADB storage folder">>"/home/daavvis/daavvisgit/buildscript/build.conf"
    line=`adb devices | grep -v "List"  | awk '{print $1}'`
      id=`echo $line | awk '{print $1}'`
      echo "Device id is $id $@ ..."
      echo ""$DEVICE""id"="$line"   # "$DEVICE" ADB id">>"/home/daavvis/daavvisgit/buildscript/build.conf"
      DEVICEID[$((i++))]=$line
      echo ${DEVICEID[@]}
  done
else
  echo "Ok, not copying finished product using adb."
fi

# Send file to device

if [ "$ADBPUSH" = y ]; then
  ROMFOLDER=$"/home/daavvis/daavvisgit/buildscript"
  ROM=$(ls -t "$ROMFOLDER"/*"UNOFFICIAL-"$DEVICE".zip" | head -1)
  ROMMD="$ROM".md5sum
  for DEVICE in ${DEVICES[@]}; do
    TESTID=`adb devices | grep -v "List"  | awk '{print $1}'`
    if [[ "$TESTID" = "${DEVICEID[@]}" ]]; then
      adb push "$ROM" "$ADBPF"
      adb push "$ROMMD" "$ADBPF"
      echo "Files copied."
    else
      until [[ "$TESTID" = "${DEVICEID[@]}" ]]; do
      echo "Wrong device connected, please connect "$DEVICE"."
        if $(askyn "Press y when device is connected, or pess no to cancel."); then
          TESTID=`adb devices | grep -v "List"  | awk '{print $1}'`
            if [[ "$TESTID" = "${DEVICEID[@]}" ]]; then
              adb push "$ROM" "$ADBPF"
              adb push "$ROMMD" "$ADBPF"
              echo "Files copied."
              break
            else
              err "Wrong deviced atached"
            fi
        else
          err "Canceling copy."
          break
        fi
      done
    fi
  done
fi
      
      







echo "$txtrst"
